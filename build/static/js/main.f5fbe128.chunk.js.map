{"version":3,"sources":["assets/guides/guide_right_01.jpg","assets/guides/guide_left_01.jpg","assets/guides/guide_left_02.jpg","assets/textures/asset_01.jpg","assets/textures/asset_02.jpg","assets/textures/asset_03.jpg","assets/textures/asset_04.jpg","assets/textures/asset_looney2.jpg","assets/textures/asset_bp2.jpg","assets/textures/asset_tmnt2.jpg","assets/layers/layer_01.png","assets/layers/layer_02_multiply.png","assets/layers/layer_03_base.png","assets/layers/sock_mask_left.png","assets/layers/sock_mask_right.png","history.js","lib/GridManager.js","lib/MeshCanvas.js","lib/CanvasDummy.js","lib/CanvasDummyBuilder.js","components/Builder/index.js","components/Preview/index.js","App.js","reportWebVitals.js","index.js"],"names":["createBrowserHistory","GridManager","width","height","rows","columns","positions","rootPositions","this","build","colWidth","rowHeight","total","length","i","data","x","y","Math","floor","push","grids","t1","t2","index","MeshCanvas","image","gridManager","output","document","createElement","id","wireframe","src","update","ctx_wireframe","getContext","clearRect","strokeStyle","lineWidth","coord","neighbor","beginPath","upper","moveTo","lineTo","stroke","closePath","r1","s1","r2","s2","r3","s3","t3","parseFloat","a","b","img","gm","ctx_output","w","h","w_sliced","h_sliced","upperLeft","upperX","upperY","w_x","h_y","c1","c2","c3","c4","rootX","rootY","x1","y1","x2","y2","x3","y3","x4","y4","xn","linearSolution","yn","save","setTransform","fillStyle","fill","clip","drawImage","restore","xm","ym","meshify","updateMeshLines","CanvasDummy","props","mesh","image_width","image_height","values","parent","initMesh","canvas","ctx","init","meshCanvas","updateDot","prev","canvas_data","right_sock","left_sock_01","left_sock_02","meshables","dummies","map","obj","dummy","addMesh","filter","forEach","refresh","Builder","React","forwardRef","ref","sourceBitmapData","dispatch","guideRight","require","default","guideLeft01","guideLeft02","images","useRef","current","bitmapData","Array","useState","imageArray","dummyIndex","setDummyIndex","setDummy","opacity","setOpacity","canvasHolder","dotsHolder","useEffect","completed","callback","url","Image","onload","CanvasDummyBuilder","childNodes","removeChild","console","log","appendChild","className","style","draggable","alt","onMouseDown","event","Infinity","left","top","ignore","onClick","clear","attribute","Preview","thumbs","layers","canvasRef","selected","setSelected","globalCompositeOperation","Actions","App","bodyRef","setBody","dotIndexRef","boundingRect","mouseDownPos","setForceUpdate","assets","assetData","layerData","setSourceBitmapData","gridTarget","handleMouseEvent","preventDefault","stopPropagation","type","addEventListener","getBoundingClientRect","pageX","pageY","removeEventListener","targetMeshable","position","documentElement","scrollTop","random","getElementsByTagName","history","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"msMAAA,OAAe,cAA0B,4C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,2C,iECAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,uC,6BCAzC,OAAe,cAA0B,yC,6BCAzC,OAAe,cAA0B,sC,6BCAzC,OAAe,cAA0B,+C,6BCAzC,OAAe,cAA0B,2C,6BCAzC,OAAe,cAA0B,4C,6BCAzC,OAAe,cAA0B,6C,sHCE1BA,gB,8BCFMC,E,gGAC+C,IAA3DC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,cAC9C,IAAKC,KAAKC,MAAO,CACfD,KAAKC,OAAQ,EACbD,KAAKN,MAAQA,EACbM,KAAKL,OAASA,EACdK,KAAKJ,KAAOA,EACZI,KAAKH,QAAUA,EAEf,IAAMK,EAAWR,EAAQG,EACnBM,EAAYR,EAASC,EAOrBQ,IAFNR,IADAC,EAOA,GAHAG,KAAKF,UAAYA,GAAa,GAC9BE,KAAKD,cAAgBA,GAAiB,IAEjCC,KAAKF,UAAUO,OAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOE,IAAK,CAC9B,IAAMC,EAAO,CACXC,EAAIF,EAAIT,EAAWK,EACnBO,EAAGC,KAAKC,MAAML,EAAIT,GAAWM,GAE/BH,KAAKF,UAAUc,KAAKL,GAEpBP,KAAKD,cAAca,KAAnB,eAA6BL,IAIjCP,KAAKa,MAAQ,GAEb,IAAK,IAAIP,EAAI,EAAGA,EAAIN,KAAKF,UAAUO,OAASR,EAASS,IACnDN,KAAKa,MAAMD,KAAK,CACdE,GAAI,CAAC,EAAG,EAAGjB,GACXkB,GAAI,CAAC,EAAGlB,EAAS,EAAIA,Q,gCAKnBmB,EAAOR,EAAGC,GAClBT,KAAKF,UAAUkB,GAAS,CACtBR,IACAC,S,aC9CeQ,E,6FACdvB,EAAOC,EAAQuB,EAAOC,GACzBnB,KAAKoB,OAASC,SAASC,cAAc,UACrCtB,KAAKoB,OAAOG,GAAZ,SAEAvB,KAAKwB,UAAYH,SAASC,cAAc,UACxCtB,KAAKwB,UAAUD,GAAf,YAEAvB,KAAKoB,OAAO1B,MAAQA,EACpBM,KAAKoB,OAAOzB,OAASA,EAErBK,KAAKwB,UAAU9B,MAAQA,EACvBM,KAAKwB,UAAU7B,OAASA,EAExBK,KAAKyB,IAAMP,EAEXlB,KAAKmB,YAAcA,EAEnBnB,KAAK0B,W,wCAKL,IAAIC,EAAgB3B,KAAKwB,UAAUI,WAAW,MAE9CD,EAAcE,UAAU,EAAG,EAAG7B,KAAKwB,UAAU9B,MAAOM,KAAKwB,UAAU7B,QACnEgC,EAAcG,YAAc,OAC5BH,EAAcI,UAAY,EAC1B,IAAK,IAAIzB,EAAI,EAAGA,EAAIN,KAAKmB,YAAYrB,UAAUO,OAAQC,IAAK,CAC1D,IAAM0B,EAAQhC,KAAKmB,YAAYrB,UAAUQ,GACrC2B,EAAWjC,KAAKmB,YAAYrB,UAAUQ,EAAI,GAG9C,GAFIA,IAAMA,EAAI,IAAMN,KAAKmB,YAAYtB,QAAU,KAAO,IAAGoC,EAAW,MACpEN,EAAcO,YACV5B,GAAKN,KAAKmB,YAAYtB,QAAU,EAAG,CACrC,IAAMsC,EAAQnC,KAAKmB,YAAYrB,UAAUQ,EAAIN,KAAKmB,YAAYtB,QAAU,GACxE8B,EAAcS,OAAOD,EAAM3B,EAAG2B,EAAM1B,GACpCkB,EAAcU,OAAOL,EAAMxB,EAAGwB,EAAMvB,QAEpCkB,EAAcS,OAAOJ,EAAMxB,EAAGwB,EAAMvB,GAElCwB,GAAUN,EAAcU,OAAOJ,EAASzB,EAAGyB,EAASxB,GACxDkB,EAAcW,SACdX,EAAcY,e,qCAsBHC,EAAIC,EAAI3B,EAAI4B,EAAIC,EAAI5B,EAAI6B,EAAIC,EAAIC,GAE7CN,EAAKO,WAAWP,GAChBC,EAAKM,WAAWN,GAChB3B,EAAKiC,WAAWjC,GAChB4B,EAAKK,WAAWL,GAChBC,EAAKI,WAAWJ,GAChB5B,EAAKgC,WAAWhC,GAChB6B,EAAKG,WAAWH,GAChBC,EAAKE,WAAWF,GAGhB,IAAIG,IAAMjC,GAFV+B,EAAKC,WAAWD,MAEML,EAAKE,IAAO7B,EAAKC,IAAO4B,EAAKE,MAASH,EAAKE,IAAOH,EAAKE,IAAOH,EAAKE,IAAOC,EAAKE,IACjGI,IAAMlC,EAAK+B,IAAON,EAAKE,IAAO5B,EAAKC,IAAO2B,EAAKE,MAASD,EAAKE,IAAOL,EAAKE,IAAOD,EAAKE,IAAOD,EAAKE,IAGrG,MAAO,CAACI,EAAGC,EAFHnC,EAAK0B,EAAKQ,EAAIP,EAAKQ,K,gCAM3B,IAAIC,EAAMlD,KAAKyB,IAEX0B,EAAKnD,KAAKmB,YACRtB,EAAkBsD,EAAlBtD,QAASD,EAASuD,EAATvD,KAEXwD,EAAapD,KAAKoB,OAAOQ,WAAW,MACpCyB,EAAIrD,KAAKoB,OAAO1B,MAChB4D,EAAItD,KAAKoB,OAAOzB,OAEhB4D,EAAWL,EAAIxD,MAAQG,EACvB2D,EAAWN,EAAIvD,OAASC,EAEtB6D,EAAYN,EAAGpD,cAAc,GAExB2D,EAAsBD,EAAzBjD,EAAcmD,EAAWF,EAAdhD,EACbmD,EAAMF,EAASH,EACfM,EAAMF,EAASH,EAErBJ,EAAWvB,UAAU,EAAG,EAAGwB,EAAGC,GAG9B,IADA,IACShD,EADM6C,EAAGrD,UAAUO,OAASR,EAAU,EACzB,EAAGS,GAAK,EAAGA,IAC/B,IAAKA,EAAI,IAAMT,EAAU,KAAO,EAAhC,CACA,IAAMiE,EAAKX,EAAGrD,UAAUQ,GAClByD,EAAKZ,EAAGrD,UAAUQ,EAAI,GACtB0D,EAAKb,EAAGrD,UAAUQ,EAAI,EAAIT,GAC1BoE,EAAKd,EAAGrD,UAAUQ,EAAI,EAAIT,GALI,EAOLsD,EAAGpD,cAAcO,GAArC4D,EAPyB,EAO5B1D,EAAa2D,EAPe,EAOlB1D,EAEd2D,EAAKN,EAAGtD,EACR6D,EAAKP,EAAGrD,EACR6D,EAAKP,EAAGvD,EACR+D,EAAKR,EAAGtD,EACR+D,EAAKR,EAAGxD,EACRiE,EAAKT,EAAGvD,EACRiE,EAAKT,EAAGzD,EACRmE,EAAKV,EAAGxD,EAGRmE,EAAK5E,KAAK6E,eAAejB,EAAKC,EAAKa,EAAId,EAAKF,EAAQY,EAAIZ,EAAQG,EAAKW,GACrEM,EAAK9E,KAAK6E,eAAejB,EAAKC,EAAKc,EAAIf,EAAKD,EAAQY,EAAIZ,EAAQE,EAAKY,GAEzErB,EAAW2B,OACX3B,EAAW4B,aAAaJ,EAAG,GAAIE,EAAG,GAAIF,EAAG,GAAIE,EAAG,GAAIF,EAAG,GAAIE,EAAG,IAC9D1B,EAAWlB,YACXkB,EAAWhB,OAAOwB,EAAKC,GACvBT,EAAWf,OAAOuB,EAAKD,GACvBP,EAAWf,OAAOqB,EAAQG,GAC1BT,EAAWf,OAAOuB,EAAKC,GACvBT,EAAWb,YACXa,EAAW6B,UAAY,cACvB7B,EAAW8B,OACX9B,EAAW+B,OACX/B,EAAWgC,UAAUlC,EAAKgB,EAAOC,EAAOZ,EAAUC,EAAU,EAAG,EAAGD,EAAUC,GAE5EJ,EAAWiC,UAGX,IAAIC,EAAKtF,KAAK6E,eAAenB,EAAQA,EAAQU,EAAIR,EAAKF,EAAQY,EAAIZ,EAAQG,EAAKW,GAC3Ee,EAAKvF,KAAK6E,eAAelB,EAAQA,EAAQU,EAAIT,EAAKD,EAAQY,EAAIZ,EAAQE,EAAKY,GAE/ErB,EAAW2B,OACX3B,EAAW4B,aAAaM,EAAG,GAAIC,EAAG,GAAID,EAAG,GAAIC,EAAG,GAAID,EAAG,GAAIC,EAAG,IAC9DnC,EAAWlB,YACXkB,EAAWhB,OAAOsB,EAAQC,GAC1BP,EAAWf,OAAOuB,EAAKD,GACvBP,EAAWf,OAAOqB,EAAQG,GAC1BT,EAAWf,OAAOqB,EAAQC,GAC1BP,EAAWb,YACXa,EAAW6B,UAAY,cACvB7B,EAAW8B,OACX9B,EAAW+B,OACX/B,EAAWgC,UAAUlC,EAAKgB,EAAOC,EAAOZ,EAAUC,EAAU,EAAG,EAAGD,EAAUC,GAC5EJ,EAAWiC,a,+BAKbrF,KAAKwF,UACLxF,KAAKyF,sB,KCjKYC,E,6FACdC,GAAQ,IACHjG,EAAyCiG,EAAzCjG,MAAOC,EAAkCgG,EAAlChG,OAAQuB,EAA0ByE,EAA1BzE,MAAOK,EAAmBoE,EAAnBpE,GAAIhB,EAAeoF,EAAfpF,KAAMqF,EAASD,EAATC,KAEhCnE,EAAwDP,EAAxDO,IAAKjB,EAAmDU,EAAnDV,EAAGC,EAAgDS,EAAhDT,EAAUoF,EAAsC3E,EAA7CxB,MAA4BoG,EAAiB5E,EAAzBvB,OAOvC,GALAK,KAAKuB,GAAKA,EAEVvB,KAAK+F,OAAS,CAACtE,EAAKjB,GAAK,EAAGC,GAAK,EAAGoF,GAAepE,EAAI/B,MAAOoG,GAAgBrE,EAAI9B,QAClFK,KAAKgG,OAASvE,EAEVmE,EACF5F,KAAKiG,SAASvG,EAAOC,EAAQY,OACxB,CACLP,KAAKkG,OAAS7E,SAASC,cAAc,UACrCtB,KAAKkG,OAAO3E,GAAZ,uBAAiCA,GAEjCvB,KAAKkG,OAAOxG,MAAQA,EACpBM,KAAKkG,OAAOvG,OAASA,EACrB,IAAMwG,EAAMnG,KAAKkG,OAAOtE,WAAW,MAEnCuE,EAAIf,UAAJ,MAAAe,EAAG,YAAcnG,KAAK+F,Y,+BAMjBrG,EAAOC,EAAQY,GACtB,IAAMY,EAAc,IAAI1B,EAExBc,EAAOA,GAAQ,CACbb,MAAOM,KAAKgG,OAAOtG,MACnBC,OAAQK,KAAKgG,OAAOrG,OACpBE,QAAS,EACTD,KAAM,GAGRuB,EAAYiF,KAAK7F,GAEjBP,KAAKqG,WAAa,IAAIpF,EACtBjB,KAAKqG,WAAWD,KAAK1G,EAAOC,EAAQK,KAAKgG,OAAQ7E,K,gCAKzCH,EAAOR,EAAGC,GAClBT,KAAKqG,WAAWlF,YAAYmF,UAAUtF,EAAOR,EAAGC,GAChDT,KAAKqG,WAAW3E,W,gCAIhB,GAAI1B,KAAKqG,WACPrG,KAAKqG,WAAW3E,aACX,CACL,IAAIyE,EAAMnG,KAAKkG,OAAOtE,WAAW,MACjCuE,EAAItE,UAAU,EAAG,EAAG7B,KAAKkG,OAAOxG,MAAOM,KAAKkG,OAAOvG,QACnDwG,EAAIf,UAAJ,MAAAe,EAAG,YAAcnG,KAAK+F,c,6BC8Cb,M,6FAlGRtE,GAAM,IAqDL8E,EArDI,OACFC,EAAc,CAClB,CACEjF,GAAI,oBACJ7B,MAAO,IACPC,OAAQ,IACRuB,MAAO,CACLV,GAAI,EACJC,GAAI,EACJf,MAAO,IACPC,OAAQ,MAGZ,CACE4B,GAAI,oBACJ7B,MAAO,IACPC,OAAQ,IACRuB,MAAO,CAAEO,IAAK,qBACdlB,KAAMkG,GAER,CACElF,GAAI,mBACJ7B,MAAO,IACPC,OAAQ,IACRuB,MAAO,CACLV,GAAI,IACJC,GAAI,EACJf,MAAO,IACPC,OAAQ,MAGZ,CACE4B,GAAI,sBACJ7B,MAAO,IACPC,OAAQ,IACRuB,MAAO,CACLV,GAAI,GACJC,GAAI,GACJf,MAAO,IACPC,OAAQ,IACR8B,IAAK,oBAEPlB,KAAMmG,GAER,CACEnF,GAAI,sBACJ7B,MAAO,IACPC,OAAQ,IACRuB,MAAO,CAAEO,IAAK,uBACdlB,KAAMoG,IAKV3G,KAAK4G,UAAY,GAEjB5G,KAAK6G,QAAUL,EAAYM,KAAI,SAACC,EAAKzG,GACnC,IAAM0G,EAAQ,IAAItB,EAClBqB,EAAI7F,MAAQ6F,EAAI7F,OAAS,GACrB6F,EAAI7F,MAAMO,IAId,IAAMwF,EAAUF,EAAI7F,MAAMO,MAAO,EAajC,OAZAsF,EAAI7F,MAAMO,IAAMwF,EAAUV,EAAO9E,EAE7BwF,IAASF,EAAInB,KAAOqB,GAExBD,EAAMZ,KAAKW,GAEPA,EAAI7F,MAAMO,MAAQ8E,GACpB,EAAKK,UAAUhG,KAAKoG,GAGtBT,EAAOS,EAAMX,WAAaW,EAAMX,WAAWjF,OAAS4F,EAAMd,OAEnDc,O,8BAMH9D,GACYlD,KAAK6G,QAAQK,QAAO,SAAAF,GACpC,OAAQA,EAAMX,cAGNc,SAAQ,SAACH,EAAO1G,GACxB0G,EAAMjB,OAAO,GAAK7C,EAClB8D,EAAMI,aAGRpH,KAAK4G,UAAUO,SAAQ,SAACH,EAAO1G,GAC7B0G,EAAMI,iB,MCqHGC,G,MAhNCC,IAAMC,YAAW,SAAC5B,EAAO6B,GACA7B,EAA/B8B,iBADwC,IACtBC,EAAa/B,EAAb+B,SAEpBC,EAAaC,EAAQ,IAA0CC,QAC/DC,EAAcF,EAAQ,IAAyCC,QAC/DE,EAAcH,EAAQ,IAAyCC,QAE/DG,EAASC,iBAAO,CAACN,EAAYG,EAAaC,IAAcG,QACxDC,EAAaF,iBAAO,IAAIG,MAAMJ,EAAO3H,QAAQ6E,KAAK,OAAOgD,QARhB,EAUXG,qBAVW,mBAUxCC,EAVwC,aAWXD,sBAXW,mBAWxCE,EAXwC,KAW5BC,EAX4B,OAYrBH,qBAZqB,mBAYxCrB,EAZwC,KAYjCyB,EAZiC,OAajBJ,mBAAS,GAbQ,mBAaxCK,EAbwC,KAa/BC,EAb+B,KAiBzCC,GAFYX,iBAAO,IAAIC,QAERD,oBACfY,EAAaZ,mBAmDnB,OAjDAa,qBAAU,WACR,IAAKR,EAAY,CACf,IAAIS,EAAY,EAChB,SAASC,MACDD,IAAcf,EAAO3H,QAWzBmI,EAAc,GAIlBR,EAAOb,SAAQ,SAAC8B,EAAKjI,GACnB,IAAMkC,EAAM,IAAIgG,MAChBhG,EAAIzB,IAAMwH,EAEVd,EAAWnH,GAASkC,EAEpBA,EAAIiG,OAASH,QAGhB,CAACV,IAEJQ,qBAAU,WACJP,GAAc,GAChBE,EAASW,EAAmBxC,UAAU2B,MAEvC,CAACA,IAEJO,qBAAU,WACR,GAAI9B,EAAO,CACT,KAAO4B,EAAaV,QAAQmB,WAAWhJ,QACrCuI,EAAaV,QAAQoB,YAAYV,EAAaV,QAAQmB,WAAW,IAEnEE,QAAQC,IAAI,gBACZD,QAAQC,IAAIxC,GACZA,EAAMI,UACNwB,EAAaV,QAAQuB,YAAYzC,EAAMX,WAAWjF,QAClDwH,EAAaV,QAAQuB,YAAYzC,EAAMX,WAAW7E,cAEnD,CAACwF,IAECA,EAaH,sBAAK0C,UAAU,UAAf,UACE,qBAAKA,UAAU,SAAf,SACE,sBACEA,UAAU,QACVC,MAAO,CACLjK,MAAOsH,EAAMX,WAAWjF,OAAO1B,MAAQ,IACvCC,OAAQqH,EAAMX,WAAWjF,OAAOzB,OAAS,KAJ7C,UAOE,qBAAKiK,WAAW,EAAOnI,IAAK0G,EAAWI,GAAY9G,IAAKoI,IAAG,UAC3D,qBACEH,UAAU,gBACVlC,IAAKoB,EACLe,MAAO,CACLjB,aAGJ,qBACElB,IAAKqB,EACLtH,GAAG,cACHmI,UAAU,cACVI,YAAa,SAAAC,GACXrC,EAASqC,EAAOC,IAAUzB,EAAYM,EAAWX,UAEnDyB,MAAO,CACLjK,MAAOsH,EAAMX,WAAWjF,OAAO1B,MAC/BC,OAAQqH,EAAMX,WAAWjF,OAAOzB,QATpC,SAcGqH,EAAMX,WAAWlF,YAAYrB,UAAUgH,KAAI,SAAC9E,EAAOhB,GAClD,OACE,sBACE8I,YAAa,SAAAC,GACXrC,EAASqC,EAAO/I,EAAOuH,EAAYM,EAAWX,UAGhDwB,UAAU,WACVC,MAAO,CACLM,KAAMjI,EAAMxB,EACZ0J,IAAKlI,EAAMvB,GARf,UAWE,qBAAKiJ,UAAU,aACf,qBAAKA,UAAU,eAZjB,cAIc1I,cAgBxB,sBAAK0I,UAAU,WAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,wDACCN,EAAmBxC,UAAUE,KAAI,SAACqD,EAAQnJ,GACzC,OACE,qBACE0I,UAAU,SAEVU,QAAS,WACP5B,EAAcxH,GACdyH,EAASW,EAAmBxC,UAAU5F,KAL1C,+BAOiBA,IAPjB,iBAEiBA,UASvB,qBAAK0I,UAAU,gBAAf,SACE,qBACEA,UAAU,SACVU,QAAS,WACPzB,EAAWD,EAAU,EAAI,IAH7B,SAME,sDAGJ,qBAAKgB,UAAU,gBAAf,SACE,qBACEA,UAAU,SACVU,QAAS,WACPzB,EAAuB,IAAZD,EAAgB,IAAO,IAHtC,SAME,wDAGJ,qBAAKgB,UAAU,gBAAf,SACE,qBACEA,UAAU,SACVU,QAAS,WACPb,QAAQc,QACR,IACIjJ,EAAM,KACJ+B,EAAK6D,EAAMX,WAAWlF,YAFT,CAAC,QAAS,SAAU,UAAW,QAGvCgG,SAAQ,SAAAmD,GACjBlJ,GAAM,WAAQkJ,EAAR,cAAuBnH,EAAGmH,GAA1B,UAERlJ,GAAM,kBACN+B,EAAGrD,UAAUqH,SAAQ,SAACnF,EAAOhB,GAC3BI,GAAM,iBAAcY,EAAMxB,EAApB,kBAA+BwB,EAAMvB,EAArC,MACF0C,EAAGrD,UAAUkB,EAAQ,KAAII,GAAU,SAEzCA,GAAM,yBAEN+B,EAAGpD,cAAcoH,SAAQ,SAACnF,EAAOhB,GAC/BI,GAAM,iBAAcY,EAAMxB,EAApB,kBAA+BwB,EAAMvB,EAArC,MACF0C,EAAGrD,UAAUkB,EAAQ,KAAII,GAAU,SAEzCA,GAAU,IAEVA,GAAU,IACVmI,QAAQC,IAAIpI,IAxBhB,SA4BE,wDAnIS,SCINmJ,G,MAtECjD,IAAMC,YAAW,SAAC5B,EAAO6B,GAAS,IACxCgD,EAAmB7E,EAAnB6E,OAAQC,EAAW9E,EAAX8E,OACVC,EAAYzC,mBAF6B,EAIfI,mBAAS,GAJM,mBAIxCsC,EAJwC,KAI9BC,EAJ8B,KA8C/C,OAxCA9B,qBAAU,WACR,GAAI6B,GAAY,EAAG,CACjBvB,EAAmBhC,QAAQoD,EAAOG,IAClC,IAAMzE,EAASwE,EAAUxC,QACnB/B,EAAMD,EAAOtE,WAAW,MAC9BuE,EAAItE,UAAU,EAAG,EAAGqE,EAAOxG,MAAOwG,EAAOvG,QAEzC,IAAK,IAAIW,EAAImK,EAAOpK,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAC3C,IAAM4C,EAAMuH,EAAOnK,GACnB,OAAQA,GACN,KAAK,EACH6F,EAAIf,UAAUlC,EAAK,EAAG,EAAGgD,EAAOxG,MAAOwG,EAAOvG,QAC9C,MACF,KAAK,EACHwG,EAAI0E,yBAA2B,WAC/B1E,EAAIf,UAAUlC,EAAK,EAAG,EAAGgD,EAAOxG,MAAOwG,EAAOvG,QAC9C,MACF,KAAK,EACHwG,EAAIf,UAAUlC,EAAK,EAAG,EAAGgD,EAAOxG,MAAOwG,EAAOvG,QAC9CwG,EAAI0E,yBAA2B,cAG/B1E,EAAIf,UAAUgE,EAAmBxC,UAAU,GAAGP,WAAWjF,OAAQ,EAAG,EAAG8E,EAAOxG,MAAOwG,EAAOvG,QAC5FwG,EAAIf,UAAUgE,EAAmBxC,UAAU,GAAGP,WAAWjF,OAAQ,EAAG,EAAG8E,EAAOxG,MAAOwG,EAAOvG,QAC5F,MACF,KAAK,EACHwG,EAAIf,UAAUlC,EAAK,EAAG,EAAGgD,EAAOxG,MAAOwG,EAAOvG,QAC9CwG,EAAI0E,yBAA2B,cAE/B1E,EAAIf,UAAUgE,EAAmBxC,UAAU,GAAGP,WAAWjF,OAAQ,EAAG,EAAG8E,EAAOxG,MAAOwG,EAAOvG,QAC5FwG,EAAIf,UAAUgE,EAAmBxC,UAAU,GAAGP,WAAWjF,OAAQ,EAAG,EAAG8E,EAAOxG,MAAOwG,EAAOvG,QAKhGwG,EAAI0E,yBAA2B,kBAGlC,CAACF,IAGF,qBAAKjB,UAAU,YAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,UAAf,SACGc,EAAO1D,KAAI,SAAC5D,EAAK5C,GAChB,OACE,qBACEoJ,UAAWpJ,IAAMqK,EAAW,WAAa,GACzClJ,IAAKyB,EAAIzB,IAEToI,IAAG,mBAAcvJ,GACjB8J,QAAS,WACPQ,EAAYtK,KANhB,UAGU4C,EAAIzB,IAHd,YAGqBnB,SAS3B,wBAAQkH,IAAKkD,EAAWhL,MAAO,IAAMC,OAAQ,eC9DxCmL,G,MACC,aADDA,EAED,UAFCA,EAGC,YAwCC,SAASC,IAAO,IAAD,EACD1C,qBADC,mBACrB2C,EADqB,KACZC,EADY,KAGtBC,EAAcjD,mBACdkD,EAAelD,mBACfmD,EAAenD,mBALO,EAMUI,qBANV,mBAMRgD,GANQ,WAQtBC,EAAS,CACb1D,EAAQ,IAAkCC,QAC1CD,EAAQ,IAAkCC,QAC1CD,EAAQ,IAAkCC,QAC1CD,EAAQ,IAAkCC,QAC1CD,EAAQ,IAAuCC,QAC/CD,EAAQ,IAAmCC,QAC3CD,EAAQ,IAAqCC,SAEzC0D,EAAYtD,iBAAO,IAEnBwC,EAAS,CACb7C,EAAQ,IAAgCC,QACxCD,EAAQ,IAAyCC,QACjDD,EAAQ,IAAqCC,QAC7CD,EAAQ,IAAsCC,QAC9CD,EAAQ,IAAuCC,SAE3C2D,EAAYvD,iBAAO,IA1BG,EA8BoBI,qBA9BpB,mBA8BrBZ,EA9BqB,KA8BHgE,EA9BG,KAkCtBC,GAFezD,mBAEFA,oBAInB,SAAS0D,EAAiB5B,EAAO/I,EAAOuH,EAAYvC,GAGlD,OAFA+D,EAAM6B,iBACN7B,EAAM8B,kBACE9B,EAAM+B,MACZ,KAAKhB,EACHE,EAAQe,iBAAiBjB,EAAoBa,GAAkB,GAC/DX,EAAQe,iBAAiBjB,EAAkBa,GAAkB,GAC7DD,EAAWxD,QAAUK,EACrB2C,EAAYhD,QAAUlH,EACtBmK,EAAajD,QAAUlC,EAAOgG,wBAE9BZ,EAAalD,QAAU,CACrB1H,EAAGuJ,EAAMkC,MACTxL,EAAGsJ,EAAMmC,OAGX,MACF,KAAKpB,EACHE,EAAQmB,oBAAoBrB,EAAoBa,GAAkB,GAClEX,EAAQmB,oBAAoBrB,EAAkBa,GAAkB,GAChED,EAAWxD,QAAU,KACrBgD,EAAYhD,QAAU,KACtBiD,EAAajD,QAAU,KACvBkD,EAAalD,QAAU,KACvB,MACF,KAAK4C,EACH,IAAMsB,EAAiBhD,EAAmBxC,UAAU8E,EAAWxD,SAC3DgD,EAAYhD,UAAY8B,KAC1BoC,EAAe/F,WAAWlF,YAAYrB,UAAUqH,SAAQ,SAACkF,EAAU/L,GAEjE8L,EAAe9F,UACbhG,EACA+L,EAAS7L,GAAK4K,EAAalD,QAAQ1H,EAAIuJ,EAAMkC,OAC7CI,EAAS5L,GAAK2K,EAAalD,QAAQzH,EAAIsJ,EAAMmC,WAGjDd,EAAalD,QAAU,CACrB1H,EAAGuJ,EAAMkC,MACTxL,EAAGsJ,EAAMmC,QAGXE,EAAe9F,UACb4E,EAAYhD,QACZ6B,EAAMkC,MAAQd,EAAajD,QAAQ1H,EACnCuJ,EAAMmC,MAAQf,EAAajD,QAAQzH,EAAIY,SAASiL,gBAAgBC,WAIpElB,EAAe3K,KAAK8L,WAqD1B,OA9CA1D,qBAAU,WACHkC,GACHC,EAAQ5J,SAASoL,qBAAqB,QAAQ,MAE/C,CAACzB,IAGJlC,qBAAU,WACR,IAAKrB,EAAkB,CACrB,IAAIsB,EAAY,EAChB,SAASC,IACP,KAAMD,IAAcuC,EAAOjL,OAASoK,EAAOpK,OAAQ,CACjD,IAAM6C,EAAMqI,EAAUrD,QAAQ,GAE9BuD,EAAoBvI,GACpBkG,EAAmBhD,KAAKlD,IAI5BoI,EAAOnE,SAAQ,SAAC8B,EAAK3I,GACnB,IAAM4C,EAAM,IAAIgG,MAChBhG,EAAIzB,IAAMwH,EAEV/F,EAAIiG,OAAS,WACXoC,EAAUrD,QAAQ5H,GAAK4C,EACvB8F,QAGJyB,EAAOtD,SAAQ,SAAC8B,EAAK3I,GACnB,IAAM4C,EAAM,IAAIgG,MAChBhG,EAAIzB,IAAMwH,EAEV/F,EAAIiG,OAAS,WACXqC,EAAUtD,QAAQ5H,GAAK4C,EACvB8F,WAIL,CAACvB,IAQCA,EAIH,cAAC,IAAD,CAAQiF,QAASA,EAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,GAAGC,OAAQ,SAAAjH,GAAK,OAAI,cAAC,EAAD,CAAS6E,OAAQe,EAAUrD,QAASuC,OAAQe,EAAUtD,aACtF,cAAC,IAAD,CACEyE,KAAK,SACLC,OAAQ,SAAAjH,GACN,OAAO,cAAC,EAAD,CAAS8B,iBAAkBA,EAAkBC,SAAUiE,YAV1C,2CCpMhC,IAYekB,EAZS,SAAAC,GACnBA,GAAeA,aAAuBC,UACzC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCMXQ,IAASV,OAAO,cAAC,EAAD,IAASvL,SAASkM,eAAe,SAKjDV,O","file":"static/js/main.f5fbe128.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/guide_right_01.15c1b8df.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_01.7e7d44cd.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_02.09825351.jpg\";","export default __webpack_public_path__ + \"static/media/asset_01.dae64ad5.jpg\";","export default __webpack_public_path__ + \"static/media/asset_02.a1965573.jpg\";","export default __webpack_public_path__ + \"static/media/asset_03.885eb998.jpg\";","export default __webpack_public_path__ + \"static/media/asset_04.7b80fa12.jpg\";","export default __webpack_public_path__ + \"static/media/asset_looney2.11c89469.jpg\";","export default __webpack_public_path__ + \"static/media/asset_bp2.0245ee45.jpg\";","export default __webpack_public_path__ + \"static/media/asset_tmnt2.c93b4bf5.jpg\";","export default __webpack_public_path__ + \"static/media/layer_01.0eaae9e9.png\";","export default __webpack_public_path__ + \"static/media/layer_02_multiply.f88cdf8f.png\";","export default __webpack_public_path__ + \"static/media/layer_03_base.caa520d5.png\";","export default __webpack_public_path__ + \"static/media/sock_mask_left.69764d68.png\";","export default __webpack_public_path__ + \"static/media/sock_mask_right.7a9dd145.png\";","import { createBrowserHistory } from \"history\"\n\nexport default createBrowserHistory()\n","export default class GridManager {\n  init({ width, height, rows, columns, positions, rootPositions }) {\n    if (!this.build) {\n      this.build = true\n      this.width = width\n      this.height = height\n      this.rows = rows\n      this.columns = columns\n\n      const colWidth = width / columns\n      const rowHeight = height / rows\n\n      // given 1x1, should return 2x2, 4 total, 0-3\n      // given 3x2, should return 4x3, 12 total, 0-11\n      columns++\n      rows++\n\n      const total = rows * columns\n      this.positions = positions || []\n      this.rootPositions = rootPositions || []\n\n      if (!this.positions.length) {\n        for (let i = 0; i < total; i++) {\n          const data = {\n            x: (i % columns) * colWidth,\n            y: Math.floor(i / columns) * rowHeight,\n          }\n          this.positions.push(data)\n\n          this.rootPositions.push({ ...data })\n        }\n      }\n\n      this.grids = []\n\n      for (let i = 0; i < this.positions.length - columns; i++)\n        this.grids.push({\n          t1: [0, 1, columns],\n          t2: [1, columns, 1 + columns],\n        })\n    }\n  }\n\n  updateDot(index, x, y) {\n    this.positions[index] = {\n      x,\n      y,\n    }\n  }\n}\n","export default class MeshCanvas {\n  init(width, height, image, gridManager) {\n    this.output = document.createElement(\"canvas\")\n    this.output.id = `output`\n\n    this.wireframe = document.createElement(\"canvas\")\n    this.wireframe.id = `wireframe`\n\n    this.output.width = width\n    this.output.height = height\n\n    this.wireframe.width = width\n    this.wireframe.height = height\n\n    this.src = image\n\n    this.gridManager = gridManager\n\n    this.update()\n  }\n\n  updateMeshLines() {\n    // update the mesh lines\n    let ctx_wireframe = this.wireframe.getContext(\"2d\")\n\n    ctx_wireframe.clearRect(0, 0, this.wireframe.width, this.wireframe.height)\n    ctx_wireframe.strokeStyle = \"lime\"\n    ctx_wireframe.lineWidth = 2\n    for (let i = 0; i < this.gridManager.positions.length; i++) {\n      const coord = this.gridManager.positions[i]\n      let neighbor = this.gridManager.positions[i + 1]\n      if (i && (i + 1) % (this.gridManager.columns + 1) === 0) neighbor = null\n      ctx_wireframe.beginPath()\n      if (i >= this.gridManager.columns + 1) {\n        const upper = this.gridManager.positions[i - this.gridManager.columns - 1]\n        ctx_wireframe.moveTo(upper.x, upper.y)\n        ctx_wireframe.lineTo(coord.x, coord.y)\n      } else {\n        ctx_wireframe.moveTo(coord.x, coord.y)\n      }\n      if (neighbor) ctx_wireframe.lineTo(neighbor.x, neighbor.y)\n      ctx_wireframe.stroke()\n      ctx_wireframe.closePath()\n    }\n\n    // ctx_wireframe.strokeStyle = \"red\"\n    // ctx_wireframe.lineWidth = 0.5\n    // for (let i = 0; i < this.gridManager.positions.length; i++) {\n    //   if (i % (this.gridManager.columns + 1) === 0) continue\n\n    //   const coord = this.gridManager.positions[i]\n    //   let neighbor = this.gridManager.positions[i + this.gridManager.columns]\n\n    //   if (!neighbor) break\n\n    //   ctx_wireframe.beginPath()\n    //   ctx_wireframe.moveTo(coord.x, coord.y)\n    //   ctx_wireframe.lineTo(neighbor.x, neighbor.y)\n\n    //   ctx_wireframe.stroke()\n    //   ctx_wireframe.closePath()\n    // }\n  }\n\n  linearSolution(r1, s1, t1, r2, s2, t2, r3, s3, t3) {\n    // make them all floats\n    r1 = parseFloat(r1)\n    s1 = parseFloat(s1)\n    t1 = parseFloat(t1)\n    r2 = parseFloat(r2)\n    s2 = parseFloat(s2)\n    t2 = parseFloat(t2)\n    r3 = parseFloat(r3)\n    s3 = parseFloat(s3)\n    t3 = parseFloat(t3)\n\n    let a = ((t2 - t3) * (s1 - s2) - (t1 - t2) * (s2 - s3)) / ((r2 - r3) * (s1 - s2) - (r1 - r2) * (s2 - s3))\n    let b = ((t2 - t3) * (r1 - r2) - (t1 - t2) * (r2 - r3)) / ((s2 - s3) * (r1 - r2) - (s1 - s2) * (r2 - r3))\n    let c = t1 - r1 * a - s1 * b\n\n    return [a, b, c]\n  }\n\n  meshify() {\n    let img = this.src\n\n    let gm = this.gridManager\n    let { columns, rows } = gm\n\n    let ctx_output = this.output.getContext(\"2d\")\n    let w = this.output.width\n    let h = this.output.height\n\n    let w_sliced = img.width / columns\n    let h_sliced = img.height / rows\n\n    const upperLeft = gm.rootPositions[0]\n\n    const { x: upperX, y: upperY } = upperLeft\n    const w_x = upperX + w_sliced // * column\n    const h_y = upperY + h_sliced // * row\n\n    ctx_output.clearRect(0, 0, w, h)\n    // render the images\n    const target = gm.positions.length - columns - 1\n    for (let i = target - 1; i > -1; i--) {\n      if ((i + 1) % (columns + 1) === 0) continue\n      const c1 = gm.positions[i]\n      const c2 = gm.positions[i + 1]\n      const c3 = gm.positions[i + 1 + columns]\n      const c4 = gm.positions[i + 2 + columns]\n\n      const { x: rootX, y: rootY } = gm.rootPositions[i]\n\n      let x1 = c1.x\n      let y1 = c1.y\n      let x2 = c2.x\n      let y2 = c2.y\n      let x3 = c3.x\n      let y3 = c3.y\n      let x4 = c4.x\n      let y4 = c4.y\n\n      // the bottom-right face\n      let xn = this.linearSolution(w_x, h_y, x4, w_x, upperX, x2, upperX, h_y, x3)\n      let yn = this.linearSolution(w_x, h_y, y4, w_x, upperY, y2, upperY, h_y, y3)\n\n      ctx_output.save()\n      ctx_output.setTransform(xn[0], yn[0], xn[1], yn[1], xn[2], yn[2])\n      ctx_output.beginPath()\n      ctx_output.moveTo(w_x, h_y)\n      ctx_output.lineTo(w_x, upperY)\n      ctx_output.lineTo(upperX, h_y)\n      ctx_output.lineTo(w_x, h_y)\n      ctx_output.closePath()\n      ctx_output.fillStyle = \"transparent\"\n      ctx_output.fill()\n      ctx_output.clip()\n      ctx_output.drawImage(img, rootX, rootY, w_sliced, h_sliced, 0, 0, w_sliced, h_sliced)\n\n      ctx_output.restore()\n\n      // the top-left face\n      let xm = this.linearSolution(upperX, upperX, x1, w_x, upperX, x2, upperX, h_y, x3)\n      let ym = this.linearSolution(upperY, upperY, y1, w_x, upperY, y2, upperY, h_y, y3)\n\n      ctx_output.save()\n      ctx_output.setTransform(xm[0], ym[0], xm[1], ym[1], xm[2], ym[2])\n      ctx_output.beginPath()\n      ctx_output.moveTo(upperX, upperY)\n      ctx_output.lineTo(w_x, upperY)\n      ctx_output.lineTo(upperX, h_y)\n      ctx_output.lineTo(upperX, upperY)\n      ctx_output.closePath()\n      ctx_output.fillStyle = \"transparent\"\n      ctx_output.fill()\n      ctx_output.clip()\n      ctx_output.drawImage(img, rootX, rootY, w_sliced, h_sliced, 0, 0, w_sliced, h_sliced)\n      ctx_output.restore()\n    }\n  }\n\n  update() {\n    this.meshify()\n    this.updateMeshLines()\n  }\n}\n","import GridManager from \"./GridManager\"\nimport MeshCanvas from \"./MeshCanvas\"\n\nexport default class CanvasDummy {\n  init(props) {\n    const { width, height, image, id, data, mesh } = props\n\n    const { src, x, y, width: image_width, height: image_height } = image\n\n    this.id = id\n\n    this.values = [src, x || 0, y || 0, image_width || src.width, image_height || src.height]\n    this.parent = src\n\n    if (mesh) {\n      this.initMesh(width, height, data)\n    } else {\n      this.canvas = document.createElement(\"canvas\")\n      this.canvas.id = `dummy_canvas_${id}`\n\n      this.canvas.width = width\n      this.canvas.height = height\n      const ctx = this.canvas.getContext(\"2d\")\n\n      ctx.drawImage(...this.values)\n    }\n\n    // document.getElementsByTagName(\"body\").appendChild(canvas)\n  }\n\n  initMesh(width, height, data) {\n    const gridManager = new GridManager()\n\n    data = data || {\n      width: this.parent.width,\n      height: this.parent.height,\n      columns: 5,\n      rows: 6,\n    }\n\n    gridManager.init(data)\n\n    this.meshCanvas = new MeshCanvas()\n    this.meshCanvas.init(width, height, this.parent, gridManager)\n\n    // this.parentDummy = parentDummy\n  }\n\n  updateDot(index, x, y) {\n    this.meshCanvas.gridManager.updateDot(index, x, y)\n    this.meshCanvas.update()\n  }\n\n  refresh() {\n    if (this.meshCanvas) {\n      this.meshCanvas.update()\n    } else {\n      let ctx = this.canvas.getContext(\"2d\")\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      ctx.drawImage(...this.values)\n    }\n  }\n}\n","import CanvasDummy from \"./CanvasDummy\"\n\nimport right_sock from \"../data/right_sock.json\"\nimport left_sock_01 from \"../data/left_sock_01.json\"\nimport left_sock_02 from \"../data/left_sock_02.json\"\n\nclass CanvasDummyBuilder {\n  init(src) {\n    const canvas_data = [\n      {\n        id: \"right_sock_source\",\n        width: 294,\n        height: 971,\n        image: {\n          x: -4,\n          y: -2,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"right_sock_target\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"right_sock_source\" },\n        data: right_sock,\n      },\n      {\n        id: \"left_sock_source\",\n        width: 297,\n        height: 974,\n        image: {\n          x: -293,\n          y: -1,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"left_sock_target_01\",\n        width: 287,\n        height: 940,\n        image: {\n          x: -10,\n          y: -34,\n          width: 297,\n          height: 974,\n          src: \"left_sock_source\",\n        },\n        data: left_sock_01,\n      },\n      {\n        id: \"left_sock_target_02\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"left_sock_target_01\" },\n        data: left_sock_02,\n      },\n    ]\n\n    let prev\n    this.meshables = []\n\n    this.dummies = canvas_data.map((obj, i) => {\n      const dummy = new CanvasDummy()\n      obj.image = obj.image || {}\n      if (obj.image.src) {\n      } else {\n      }\n\n      const addMesh = obj.image.src || false\n      obj.image.src = addMesh ? prev : src\n\n      if (addMesh) obj.mesh = addMesh\n\n      dummy.init(obj)\n\n      if (obj.image.src === prev) {\n        this.meshables.push(dummy)\n      }\n\n      prev = dummy.meshCanvas ? dummy.meshCanvas.output : dummy.canvas\n\n      return dummy\n    })\n\n    // throw new Error(\"STOP\")\n  }\n\n  refresh(img) {\n    const non_meshy = this.dummies.filter(dummy => {\n      return !dummy.meshCanvas\n    })\n\n    non_meshy.forEach((dummy, i) => {\n      dummy.values[0] = img\n      dummy.refresh()\n    })\n\n    this.meshables.forEach((dummy, i) => {\n      dummy.refresh()\n    })\n  }\n}\n\nexport default new CanvasDummyBuilder()\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { traverseTwoPhase } from \"react-dom/test-utils\"\nimport GridManager from \"../../lib/GridManager\"\nimport CanvasDummyBuilder from \"../../lib/CanvasDummyBuilder\"\n\nimport \"./style.scss\"\n\nimport { Actions } from \"../../App\"\n\nconst Builder = React.forwardRef((props, ref) => {\n  const { sourceBitmapData, dispatch } = props\n\n  const guideRight = require(\"../../assets/guides/guide_right_01.jpg\").default\n  const guideLeft01 = require(\"../../assets/guides/guide_left_01.jpg\").default\n  const guideLeft02 = require(\"../../assets/guides/guide_left_02.jpg\").default\n\n  const images = useRef([guideRight, guideLeft01, guideLeft02]).current\n  const bitmapData = useRef(new Array(images.length).fill(null)).current\n\n  const [imageArray, setImageArray] = useState()\n  const [dummyIndex, setDummyIndex] = useState()\n  const [dummy, setDummy] = useState()\n  const [opacity, setOpacity] = useState(1)\n\n  const gridItems = useRef([]).current\n\n  const canvasHolder = useRef()\n  const dotsHolder = useRef()\n\n  useEffect(() => {\n    if (!imageArray) {\n      let completed = 0\n      function callback() {\n        if (++completed === images.length) {\n          // if (CanvasDummyBuilder.meshables[0].parent) {\n          // gridItems.current = CanvasDummyBuilder.meshables.map((dummy, i) => {\n          //   const gridManager = new GridManager()\n          //   const { parent } = dummy\n          //   gridManager.init(parent.width, parent.height, 2, 2)\n          //   CanvasDummyBuilder.meshables[i] = dummy.initMesh(gridManager)\n          //   return gridManager\n          // })\n          // }\n\n          setDummyIndex(2)\n        }\n      }\n\n      images.forEach((url, index) => {\n        const img = new Image()\n        img.src = url\n\n        bitmapData[index] = img\n\n        img.onload = callback\n      })\n    }\n  }, [imageArray])\n\n  useEffect(() => {\n    if (dummyIndex >= 0) {\n      setDummy(CanvasDummyBuilder.meshables[dummyIndex])\n    }\n  }, [dummyIndex])\n\n  useEffect(() => {\n    if (dummy) {\n      while (canvasHolder.current.childNodes.length)\n        canvasHolder.current.removeChild(canvasHolder.current.childNodes[0])\n\n      console.log(\"DUMMY IS NOW\")\n      console.log(dummy)\n      dummy.refresh()\n      canvasHolder.current.appendChild(dummy.meshCanvas.output)\n      canvasHolder.current.appendChild(dummy.meshCanvas.wireframe)\n    }\n  }, [dummy])\n\n  if (!dummy) return null\n\n  // function getControls(type) {\n  //   const number = dummy.meshCanvas.gridManager[type]\n  //   const dummies\n  //   switch (type) {\n  //     case \"columns\":\n  //       return <div className=\"controls-column\"></div>\n  //       break\n  //   }\n  // }\n\n  return (\n    <div className=\"builder\">\n      <div className=\"holder\">\n        <div\n          className=\"guide\"\n          style={{\n            width: dummy.meshCanvas.output.width + 200,\n            height: dummy.meshCanvas.output.height + 200,\n          }}\n        >\n          <img draggable={false} src={bitmapData[dummyIndex].src} alt={`guide`} />\n          <div\n            className=\"canvas-holder\"\n            ref={canvasHolder}\n            style={{\n              opacity,\n            }}\n          ></div>\n          <div\n            ref={dotsHolder}\n            id=\"dots-holder\"\n            className=\"dots-holder\"\n            onMouseDown={event => {\n              dispatch(event, Infinity, dummyIndex, dotsHolder.current)\n            }}\n            style={{\n              width: dummy.meshCanvas.output.width,\n              height: dummy.meshCanvas.output.height,\n            }}\n          >\n            {/* <div className=\"controls\">{getControls(\"columns\")}</div> */}\n            {/* <div> */}\n            {dummy.meshCanvas.gridManager.positions.map((coord, index) => {\n              return (\n                <div\n                  onMouseDown={event => {\n                    dispatch(event, index, dummyIndex, dotsHolder.current)\n                  }}\n                  key={`dot_${index}`}\n                  className=\"grid-dot\"\n                  style={{\n                    left: coord.x,\n                    top: coord.y,\n                  }}\n                >\n                  <div className=\"cross-01\" />\n                  <div className=\"cross-02\" />\n                </div>\n              )\n            })}\n            {/* </div> */}\n          </div>\n        </div>\n      </div>\n      <div className=\"controls\">\n        <div className=\"button-holder\">\n          <div>THESE ARE THE DUMMIES</div>\n          {CanvasDummyBuilder.meshables.map((ignore, index) => {\n            return (\n              <div\n                className=\"button\"\n                key={`button_${index}`}\n                onClick={() => {\n                  setDummyIndex(index)\n                  setDummy(CanvasDummyBuilder.meshables[index])\n                }}\n              >{`Show Canvas ${index}`}</div>\n            )\n          })}\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setOpacity(opacity ? 0 : 1)\n            }}\n          >\n            <p>Toggle Visibility</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setOpacity(opacity === 1 ? 0.55 : 1)\n            }}\n          >\n            <p>Toggle Transparency</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              console.clear()\n              const attributes = [\"width\", \"height\", \"columns\", \"rows\"]\n              let output = `{ `\n              const gm = dummy.meshCanvas.gridManager\n              attributes.forEach(attribute => {\n                output += `\"${attribute}\": ${gm[attribute]} , `\n              })\n              output += `\"positions\": [ `\n              gm.positions.forEach((coord, index) => {\n                output += `{ \"x\": ${coord.x}, \"y\": ${coord.y} }`\n                if (gm.positions[index + 1]) output += \", \"\n              })\n              output += `], \"rootPositions\": [ `\n\n              gm.rootPositions.forEach((coord, index) => {\n                output += `{ \"x\": ${coord.x}, \"y\": ${coord.y} }`\n                if (gm.positions[index + 1]) output += \", \"\n              })\n              output += \"]\"\n\n              output += \"}\"\n              console.log(output)\n              // width: ${GridManager.width}, height: ${GridManager.height}, width: ${GridManager.width}, height: ${GridManager.height},  `\n            }}\n          >\n            <p>Output Points</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default Builder\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { traverseTwoPhase } from \"react-dom/test-utils\"\nimport GridManager from \"../../lib/GridManager\"\nimport CanvasDummyBuilder from \"../../lib/CanvasDummyBuilder\"\n\nimport \"./style.scss\"\n// while (whatever.current.childNodes.length) whatever.current.removeChild(whatever.current.childNodes[0])\n//           CanvasDummyBuilder.meshables.forEach((dummy, i) => {\n//             whatever.current.appendChild(dummy.meshCanvas.output)\n//           })\nimport { Actions } from \"../../App\"\n\nconst Preview = React.forwardRef((props, ref) => {\n  const { thumbs, layers } = props\n  const canvasRef = useRef()\n\n  const [selected, setSelected] = useState(0)\n\n  useEffect(() => {\n    if (selected >= 0) {\n      CanvasDummyBuilder.refresh(thumbs[selected])\n      const canvas = canvasRef.current\n      const ctx = canvas.getContext(\"2d\")\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n      for (let i = layers.length - 1; i > -1; i--) {\n        const img = layers[i]\n        switch (i) {\n          case 0:\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            break\n          case 1:\n            ctx.globalCompositeOperation = \"multiply\"\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            break\n          case 3:\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            ctx.globalCompositeOperation = \"source-atop\"\n\n            // ctx.drawImage(thumbs[selected], 0, 0, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[2].meshCanvas.output, 4, 4, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[2].meshCanvas.output, 0, 0, canvas.width, canvas.height)\n            break\n          case 4:\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            ctx.globalCompositeOperation = \"source-atop\"\n            //   // ctx.drawImage(thumbs[selected], 0, 0, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[0].meshCanvas.output, 4, 4, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[0].meshCanvas.output, 0, 0, canvas.width, canvas.height)\n            break\n          default:\n            break\n        }\n        ctx.globalCompositeOperation = \"source-over\"\n      }\n    }\n  }, [selected])\n\n  return (\n    <div className=\"container\">\n      <div className=\"preview\">\n        <div className=\"samples\">\n          {thumbs.map((img, i) => {\n            return (\n              <img\n                className={i === selected ? \"selected\" : \"\"}\n                src={img.src}\n                key={`${img.src}_${i}`}\n                alt={`thumbnail${i}`}\n                onClick={() => {\n                  setSelected(i)\n                }}\n              />\n            )\n          })}\n        </div>\n        <canvas ref={canvasRef} width={1000} height={1000} />\n      </div>\n    </div>\n  )\n})\n\nexport default Preview\n","import React, { useEffect, useRef, useState, useReducer } from \"react\"\nimport { Router, Route, Switch, withRouter } from \"react-router-dom\"\nimport history from \"./history.js\"\n\nimport Builder from \"./components/Builder\"\nimport Preview from \"./components/Preview\"\n// import CanvasDrawer from \"./components/CanvasDrawer\"\n// import MeshDrawer from \"./components/MeshDrawer\"\n// import Grid from \"./components/Grid\"\nimport CanvasDummyBuilder from \"./lib/CanvasDummyBuilder\"\n\nimport \"./App.scss\"\n// import GridManager from \"./lib/GridManager\"\n\nexport const Actions = {\n  MOUSE_DOWN: \"mousedown\",\n  MOUSE_UP: \"mouseup\",\n  MOUSE_MOVE: \"mousemove\",\n}\n\n/*\n\nMAIN COMP:\n  Comp: 1000x1000\n  Guide: 1200x1200\n\n\nRIGHT SOCK:\n  Canvas 1 (lives on main comp):\n    294x971\n      Bitmap Data Drawn into Canvas:\n        x: -4, y: -2\n        590x975\n\n\n\n\n\n\nLEFT SOCK:\n  Canvas 1 (initial warping used in Canvas 2):\n    297x974\n      Bitmap Data Drawn into Canvas:\n        x: -293 (Align.RIGHT), y: -1\n        590x975\n      Guide:\n        487x1140\n  Canvas 2 (lives on main comp, warps Canvas 1):\n    287x940\n\n\n\n\n\n\n*/\n\nexport default function App() {\n  const [bodyRef, setBody] = useState()\n\n  const dotIndexRef = useRef()\n  const boundingRect = useRef()\n  const mouseDownPos = useRef()\n  const [forceUpdate, setForceUpdate] = useState()\n\n  const assets = [\n    require(\"./assets/textures/asset_01.jpg\").default,\n    require(\"./assets/textures/asset_02.jpg\").default,\n    require(\"./assets/textures/asset_03.jpg\").default,\n    require(\"./assets/textures/asset_04.jpg\").default,\n    require(\"./assets/textures/asset_looney2.jpg\").default,\n    require(\"./assets/textures/asset_bp2.jpg\").default,\n    require(\"./assets/textures/asset_tmnt2.jpg\").default,\n  ]\n  const assetData = useRef([])\n\n  const layers = [\n    require(\"./assets/layers/layer_01.png\").default,\n    require(\"./assets/layers/layer_02_multiply.png\").default,\n    require(\"./assets/layers/layer_03_base.png\").default,\n    require(\"./assets/layers/sock_mask_left.png\").default,\n    require(\"./assets/layers/sock_mask_right.png\").default,\n  ]\n  const layerData = useRef([])\n\n  // const whatever = useRef()\n\n  const [sourceBitmapData, setSourceBitmapData] = useState()\n\n  const canvasHolder = useRef()\n\n  const gridTarget = useRef()\n\n  ////////////////////////////////////////////////////////////\n\n  function handleMouseEvent(event, index, dummyIndex, parent) {\n    event.preventDefault()\n    event.stopPropagation()\n    switch (event.type) {\n      case Actions.MOUSE_DOWN:\n        bodyRef.addEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n        bodyRef.addEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n        gridTarget.current = dummyIndex\n        dotIndexRef.current = index\n        boundingRect.current = parent.getBoundingClientRect()\n\n        mouseDownPos.current = {\n          x: event.pageX,\n          y: event.pageY,\n        }\n\n        break\n      case Actions.MOUSE_UP:\n        bodyRef.removeEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n        bodyRef.removeEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n        gridTarget.current = null\n        dotIndexRef.current = null\n        boundingRect.current = null\n        mouseDownPos.current = null\n        break\n      case Actions.MOUSE_MOVE:\n        const targetMeshable = CanvasDummyBuilder.meshables[gridTarget.current]\n        if (dotIndexRef.current === Infinity) {\n          targetMeshable.meshCanvas.gridManager.positions.forEach((position, i) => {\n            // console.log(i, targetMeshable.updateDot)\n            targetMeshable.updateDot(\n              i,\n              position.x - (mouseDownPos.current.x - event.pageX),\n              position.y - (mouseDownPos.current.y - event.pageY)\n            )\n          })\n          mouseDownPos.current = {\n            x: event.pageX,\n            y: event.pageY,\n          }\n        } else {\n          targetMeshable.updateDot(\n            dotIndexRef.current,\n            event.pageX - boundingRect.current.x,\n            event.pageY - boundingRect.current.y - document.documentElement.scrollTop\n          )\n        }\n        // GridManager.updateDot(dotIndexRef.current, event.pageX, event.pageY)\n        setForceUpdate(Math.random())\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (!bodyRef) {\n      setBody(document.getElementsByTagName(\"body\")[0])\n    }\n  }, [bodyRef])\n\n  ////////////////////////////////////////////////////////////\n  useEffect(() => {\n    if (!sourceBitmapData) {\n      let completed = 0\n      function callback() {\n        if (++completed === assets.length + layers.length) {\n          const img = assetData.current[0]\n\n          setSourceBitmapData(img)\n          CanvasDummyBuilder.init(img)\n        }\n      }\n\n      assets.forEach((url, i) => {\n        const img = new Image()\n        img.src = url\n\n        img.onload = () => {\n          assetData.current[i] = img\n          callback()\n        }\n      })\n      layers.forEach((url, i) => {\n        const img = new Image()\n        img.src = url\n\n        img.onload = () => {\n          layerData.current[i] = img\n          callback()\n        }\n      })\n    }\n  }, [sourceBitmapData])\n\n  // return (\n  //   <div>\n  //     <div ref={canvasHolder} />\n  //   </div>\n  // )\n\n  if (!sourceBitmapData) return <div>LOADING!</div>\n\n  // return <div ref={whatever} />\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path=\"\" render={props => <Preview thumbs={assetData.current} layers={layerData.current} />} />\n        <Route\n          path=\"/admin\"\n          render={props => {\n            return <Builder sourceBitmapData={sourceBitmapData} dispatch={handleMouseEvent} />\n          }}\n        />\n      </Switch>\n    </Router>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\n// ReactDOM.render(\n// \t<React.StrictMode>\n// \t\t<App />\n// \t</React.StrictMode>,\n// \tdocument.getElementById('root')\n// )\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}