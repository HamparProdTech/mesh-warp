{"version":3,"sources":["assets/guides/guide_right_01.jpg","assets/guides/guide_left_01.jpg","assets/guides/guide_left_02.jpg","assets/textures/asset_01.jpg","assets/textures/asset_02.jpg","assets/textures/asset_03.jpg","assets/textures/asset_04.jpg","assets/textures/asset_looney2.jpg","assets/textures/asset_bp2.jpg","assets/textures/asset_tmnt2.jpg","assets/layers/layer_01.png","assets/layers/layer_02_multiply.png","assets/layers/layer_03_base.png","assets/layers/sock_mask_left.png","assets/layers/sock_mask_right.png","history.js","lib/GridManager.js","lib/MeshCanvas.js","lib/CanvasDummy.js","lib/CanvasDummyBuilder.js","components/Builder/index.js","components/Preview/index.js","App.js","reportWebVitals.js","index.js"],"names":["createBrowserHistory","GridManager","width","height","rows","columns","positions","rootPositions","this","build","colWidth","rowHeight","total","length","i","data","x","y","Math","floor","push","grids","t1","t2","newPositions","console","warn","log","slice","index","MeshCanvas","image","gridManager","output","document","createElement","id","wireframe","src","refresh","ctx_wireframe","getContext","clearRect","strokeStyle","lineWidth","coord","neighbor","beginPath","upper","moveTo","lineTo","stroke","closePath","r1","s1","r2","s2","r3","s3","t3","parseFloat","a","b","img","gm","ctx_output","w","h","w_sliced","h_sliced","rewind_amount","skip_amount","c1","c2","c3","c4","rootX","rootY","x1","y1","x2","y2","x3","y3","x4","y4","xn","linearSolution","yn","save","setTransform","fillStyle","fill","clip","drawImage","restore","xm","ym","meshify","updateMeshLines","doublePoints","CanvasDummy","props","mesh","image_width","image_height","values","parent","initMesh","canvas","ctx","init","meshCanvas","updateDot","prev","canvas_data","right_sock","left_sock_01","left_sock_02","meshables","dummies","map","obj","dummy","addMesh","filter","forEach","Builder","React","forwardRef","ref","sourceBitmapData","dispatch","guideRight","require","default","guideLeft01","guideLeft02","images","useRef","current","bitmapData","Array","useState","imageArray","dummyIndex","setDummyIndex","setDummy","opacity","setOpacity","transparency","setTransparency","showDots","setShowDots","wireframeOpacity","setWireframeOpacity","setForceUpdate","canvasHolder","dotsHolder","useEffect","completed","callback","url","Image","onload","CanvasDummyBuilder","childNodes","removeChild","appendChild","style","className","draggable","alt","onMouseDown","event","Infinity","left","top","ignore","onClick","next_opacity","old_points","new_points_01_columns","new_points_02_rows","new_points_03_square","new_points","getAverage","indexes","direction","col_total","pushNew","array1","array2","nextValue","shift","random","attribute","clear","Preview","thumbs","layers","canvasRef","selected","setSelected","globalCompositeOperation","CanvasColoring","contrast","target","amount","Actions","App","bodyRef","setBody","dotIndexRef","boundingRect","mouseDownPos","assets","assetData","layerData","setSourceBitmapData","gridTarget","handleMouseEvent","preventDefault","stopPropagation","type","addEventListener","getBoundingClientRect","pageX","pageY","removeEventListener","targetMeshable","position","documentElement","scrollTop","getElementsByTagName","history","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.348664fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/guide_right_01.15c1b8df.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_01.7e7d44cd.jpg\";","export default __webpack_public_path__ + \"static/media/guide_left_02.09825351.jpg\";","export default __webpack_public_path__ + \"static/media/asset_01.dae64ad5.jpg\";","export default __webpack_public_path__ + \"static/media/asset_02.a1965573.jpg\";","export default __webpack_public_path__ + \"static/media/asset_03.885eb998.jpg\";","export default __webpack_public_path__ + \"static/media/asset_04.7b80fa12.jpg\";","export default __webpack_public_path__ + \"static/media/asset_looney2.11c89469.jpg\";","export default __webpack_public_path__ + \"static/media/asset_bp2.0245ee45.jpg\";","export default __webpack_public_path__ + \"static/media/asset_tmnt2.c93b4bf5.jpg\";","export default __webpack_public_path__ + \"static/media/layer_01.0eaae9e9.png\";","export default __webpack_public_path__ + \"static/media/layer_02_multiply.f88cdf8f.png\";","export default __webpack_public_path__ + \"static/media/layer_03_base.caa520d5.png\";","export default __webpack_public_path__ + \"static/media/sock_mask_left.69764d68.png\";","export default __webpack_public_path__ + \"static/media/sock_mask_right.7a9dd145.png\";","import { createBrowserHistory } from \"history\"\n\nexport default createBrowserHistory()\n","export default class GridManager {\n  init({ width, height, rows, columns, positions, rootPositions }) {\n    if (!this.build) {\n      this.build = true\n      this.width = width\n      this.height = height\n      this.rows = rows\n      this.columns = columns\n\n      const colWidth = width / columns\n      const rowHeight = height / rows\n\n      // given 1x1, should return 2x2, 4 total, 0-3\n      // given 3x2, should return 4x3, 12 total, 0-11\n      columns++\n      rows++\n\n      const total = rows * columns\n      this.positions = positions || []\n      this.rootPositions = rootPositions || []\n\n      if (!this.rootPositions.length) {\n        for (let i = 0; i < total; i++) {\n          const data = {\n            x: (i % columns) * colWidth,\n            y: Math.floor(i / columns) * rowHeight,\n          }\n          this.positions.push(data)\n\n          this.rootPositions.push({ ...data })\n        }\n      }\n\n      this.grids = []\n\n      for (let i = 0; i < this.positions.length - columns; i++)\n        this.grids.push({\n          t1: [0, 1, columns],\n          t2: [1, columns, 1 + columns],\n        })\n    }\n  }\n\n  doublePoints(newPositions) {\n    console.warn(`Going from ${this.columns}x${this.rows}`)\n    console.log(`\\t ${this.positions.slice().length}`)\n    this.columns *= 2\n    this.rows *= 2\n    this.positions = newPositions\n\n    console.warn(`\\t to ${this.columns}x${this.rows}`)\n    console.log(`\\t ${this.positions.length}`)\n\n    let columns = this.columns\n    let rows = this.rows\n    const colWidth = this.width / columns\n    const rowHeight = this.height / rows\n\n    // given 1x1, should return 2x2, 4 total, 0-3\n    // given 3x2, should return 4x3, 12 total, 0-11\n    columns++\n    rows++\n\n    const total = rows * columns\n    this.rootPositions = []\n    if (!this.rootPositions.length) {\n      for (let i = 0; i < total; i++) {\n        const data = {\n          x: (i % columns) * colWidth,\n          y: Math.floor(i / columns) * rowHeight,\n        }\n\n        this.rootPositions.push(data)\n      }\n    }\n  }\n\n  updateDot(index, x, y) {\n    this.positions[index] = {\n      x,\n      y,\n    }\n  }\n}\n","export default class MeshCanvas {\n  init(width, height, image, gridManager) {\n    this.output = document.createElement(\"canvas\")\n    this.output.id = `output`\n\n    this.wireframe = document.createElement(\"canvas\")\n    this.wireframe.id = `wireframe`\n\n    this.output.width = width\n    this.output.height = height\n\n    this.wireframe.width = width\n    this.wireframe.height = height\n\n    this.src = image\n\n    this.gridManager = gridManager\n\n    this.refresh()\n  }\n\n  updateMeshLines() {\n    // update the mesh lines\n    let ctx_wireframe = this.wireframe.getContext(\"2d\")\n\n    ctx_wireframe.clearRect(0, 0, this.wireframe.width, this.wireframe.height)\n    ctx_wireframe.strokeStyle = \"lime\"\n    ctx_wireframe.lineWidth = 1\n    for (let i = 0; i < this.gridManager.positions.length; i++) {\n      const coord = this.gridManager.positions[i]\n      let neighbor = this.gridManager.positions[i + 1]\n      if (i && (i + 1) % (this.gridManager.columns + 1) === 0) neighbor = null\n      ctx_wireframe.beginPath()\n      if (i >= this.gridManager.columns + 1) {\n        const upper = this.gridManager.positions[i - this.gridManager.columns - 1]\n        ctx_wireframe.moveTo(upper.x, upper.y)\n        ctx_wireframe.lineTo(coord.x, coord.y)\n      } else {\n        ctx_wireframe.moveTo(coord.x, coord.y)\n      }\n      if (neighbor) ctx_wireframe.lineTo(neighbor.x, neighbor.y)\n      ctx_wireframe.stroke()\n      ctx_wireframe.closePath()\n    }\n\n    // ctx_wireframe.strokeStyle = \"red\"\n    // ctx_wireframe.lineWidth = 0.5\n    // for (let i = 0; i < this.gridManager.positions.length; i++) {\n    //   if (i % (this.gridManager.columns + 1) === 0) continue\n\n    //   const coord = this.gridManager.positions[i]\n    //   let neighbor = this.gridManager.positions[i + this.gridManager.columns]\n\n    //   if (!neighbor) break\n\n    //   ctx_wireframe.beginPath()\n    //   ctx_wireframe.moveTo(coord.x, coord.y)\n    //   ctx_wireframe.lineTo(neighbor.x, neighbor.y)\n\n    //   ctx_wireframe.stroke()\n    //   ctx_wireframe.closePath()\n    // }\n  }\n\n  linearSolution(r1, s1, t1, r2, s2, t2, r3, s3, t3) {\n    // make them all floats\n    r1 = parseFloat(r1)\n    s1 = parseFloat(s1)\n    t1 = parseFloat(t1)\n    r2 = parseFloat(r2)\n    s2 = parseFloat(s2)\n    t2 = parseFloat(t2)\n    r3 = parseFloat(r3)\n    s3 = parseFloat(s3)\n    t3 = parseFloat(t3)\n\n    let a = ((t2 - t3) * (s1 - s2) - (t1 - t2) * (s2 - s3)) / ((r2 - r3) * (s1 - s2) - (r1 - r2) * (s2 - s3))\n    let b = ((t2 - t3) * (r1 - r2) - (t1 - t2) * (r2 - r3)) / ((s2 - s3) * (r1 - r2) - (s1 - s2) * (r2 - r3))\n    let c = t1 - r1 * a - s1 * b\n\n    return [a, b, c]\n  }\n\n  meshify() {\n    let img = this.src\n\n    let gm = this.gridManager\n    let { columns, rows } = gm\n\n    let ctx_output = this.output.getContext(\"2d\")\n    let w = this.output.width\n    let h = this.output.height\n\n    let w_sliced = img.width / columns\n    let h_sliced = img.height / rows\n\n    ctx_output.clearRect(0, 0, w, h)\n    // render the images\n    const target = gm.positions.length - 1 - columns - 2\n    const rewind_amount = columns + 1\n    const skip_amount = rewind_amount * rows - 1\n    for (let i = target; i > -1; i -= rewind_amount) {\n      const c1 = gm.positions[i]\n      const c2 = gm.positions[i + 1]\n      const c3 = gm.positions[i + 1 + columns]\n      const c4 = gm.positions[i + 2 + columns]\n\n      const { x: rootX, y: rootY } = gm.rootPositions[i]\n\n      let x1 = c1.x\n      let y1 = c1.y\n      let x2 = c2.x\n      let y2 = c2.y\n      let x3 = c3.x\n      let y3 = c3.y\n      let x4 = c4.x\n      let y4 = c4.y\n\n      // the bottom-right face\n      let xn = this.linearSolution(w_sliced, h_sliced, x4, w_sliced, 0, x2, 0, h_sliced, x3)\n      let yn = this.linearSolution(w_sliced, h_sliced, y4, w_sliced, 0, y2, 0, h_sliced, y3)\n\n      ctx_output.save()\n      ctx_output.setTransform(xn[0], yn[0], xn[1], yn[1], xn[2], yn[2])\n      ctx_output.beginPath()\n      ctx_output.moveTo(w_sliced, h_sliced)\n      ctx_output.lineTo(w_sliced, 0)\n      ctx_output.lineTo(0, h_sliced)\n      ctx_output.lineTo(w_sliced, h_sliced)\n      ctx_output.closePath()\n      ctx_output.fillStyle = \"transparent\"\n      ctx_output.fill()\n      ctx_output.clip()\n      ctx_output.drawImage(img, rootX, rootY, w_sliced, h_sliced, 0, 0, w_sliced, h_sliced)\n\n      ctx_output.restore()\n\n      // the top-left face\n      let xm = this.linearSolution(0, 0, x1, w_sliced, 0, x2, 0, h_sliced, x3)\n      let ym = this.linearSolution(0, 0, y1, w_sliced, 0, y2, 0, h_sliced, y3)\n\n      ctx_output.save()\n      ctx_output.setTransform(xm[0], ym[0], xm[1], ym[1], xm[2], ym[2])\n      ctx_output.beginPath()\n      ctx_output.moveTo(0, 0)\n      ctx_output.lineTo(w_sliced, 0)\n      ctx_output.lineTo(0, h_sliced)\n      ctx_output.lineTo(0, 0)\n      ctx_output.closePath()\n      ctx_output.fillStyle = \"transparent\"\n      ctx_output.fill()\n      ctx_output.clip()\n      ctx_output.drawImage(img, rootX, rootY, w_sliced, h_sliced, 0, 0, w_sliced, h_sliced)\n      ctx_output.restore()\n\n      if (i && i - rewind_amount < 0) i += skip_amount\n    }\n  }\n\n  refresh() {\n    this.meshify()\n    this.updateMeshLines()\n  }\n\n  doublePoints(newPositions) {\n    this.gridManager.doublePoints(newPositions)\n  }\n}\n","import GridManager from \"./GridManager\"\nimport MeshCanvas from \"./MeshCanvas\"\n\nexport default class CanvasDummy {\n  init(props) {\n    const { width, height, image, id, data, mesh } = props\n\n    const { src, x, y, width: image_width, height: image_height } = image\n\n    this.id = id\n\n    this.values = [src, x || 0, y || 0, image_width || src.width, image_height || src.height]\n    this.parent = src\n\n    if (mesh) {\n      this.initMesh(width, height, data)\n    } else {\n      this.canvas = document.createElement(\"canvas\")\n      this.canvas.id = `dummy_canvas_${id}`\n\n      this.canvas.width = width\n      this.canvas.height = height\n      const ctx = this.canvas.getContext(\"2d\")\n\n      ctx.drawImage(...this.values)\n    }\n\n    // document.getElementsByTagName(\"body\").appendChild(canvas)\n  }\n\n  initMesh(width, height, data) {\n    const gridManager = new GridManager()\n\n    // data = null\n    data = data || {\n      width: this.parent.width,\n      height: this.parent.height,\n      columns: 1,\n      rows: 1,\n    }\n\n    gridManager.init(data)\n\n    this.meshCanvas = new MeshCanvas()\n    this.meshCanvas.init(width, height, this.parent, gridManager)\n\n    // this.parentDummy = parentDummy\n  }\n\n  doublePoints(newPositions) {\n    this.meshCanvas.doublePoints(newPositions)\n    this.refresh()\n  }\n\n  updateDot(index, x, y) {\n    this.meshCanvas.gridManager.updateDot(index, x, y)\n    this.meshCanvas.refresh()\n  }\n\n  refresh() {\n    if (this.meshCanvas) {\n      this.meshCanvas.refresh()\n    } else {\n      let ctx = this.canvas.getContext(\"2d\")\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      ctx.drawImage(...this.values)\n    }\n  }\n}\n","import CanvasDummy from \"./CanvasDummy\"\n\nimport right_sock from \"../data/right_sock.json\"\nimport left_sock_01 from \"../data/left_sock_01.json\"\nimport left_sock_02 from \"../data/left_sock_02.json\"\n\nclass CanvasDummyBuilder {\n  init(src) {\n    const canvas_data = [\n      {\n        id: \"right_sock_source\",\n        width: 294,\n        height: 971,\n        image: {\n          x: -4,\n          y: -2,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"right_sock_target\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"right_sock_source\" },\n        data: right_sock,\n      },\n      {\n        id: \"left_sock_source\",\n        width: 297,\n        height: 974,\n        image: {\n          x: -293,\n          y: -1,\n          width: 590,\n          height: 975,\n        },\n      },\n      {\n        id: \"left_sock_target_01\",\n        width: 287,\n        height: 940,\n        image: {\n          x: -10,\n          y: -34,\n          width: 297,\n          height: 974,\n          src: \"left_sock_source\",\n        },\n        data: left_sock_01,\n      },\n      {\n        id: \"left_sock_target_02\",\n        width: 1000,\n        height: 1000,\n        image: { src: \"left_sock_target_01\" },\n        data: left_sock_02,\n      },\n    ]\n\n    let prev\n    this.meshables = []\n\n    this.dummies = canvas_data.map((obj, i) => {\n      const dummy = new CanvasDummy()\n      obj.image = obj.image || {}\n      if (obj.image.src) {\n      } else {\n      }\n\n      const addMesh = obj.image.src || false\n      obj.image.src = addMesh ? prev : src\n\n      if (addMesh) obj.mesh = addMesh\n\n      dummy.init(obj)\n\n      if (obj.image.src === prev) {\n        this.meshables.push(dummy)\n      }\n\n      prev = dummy.meshCanvas ? dummy.meshCanvas.output : dummy.canvas\n\n      return dummy\n    })\n\n    // throw new Error(\"STOP\")\n  }\n\n  refresh(img) {\n    const non_meshy = this.dummies.filter(dummy => {\n      return !dummy.meshCanvas\n    })\n\n    non_meshy.forEach((dummy, i) => {\n      dummy.values[0] = img\n      dummy.refresh()\n    })\n\n    this.meshables.forEach((dummy, i) => {\n      dummy.refresh()\n    })\n  }\n}\n\nexport default new CanvasDummyBuilder()\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { traverseTwoPhase } from \"react-dom/test-utils\"\nimport GridManager from \"../../lib/GridManager\"\nimport CanvasDummyBuilder from \"../../lib/CanvasDummyBuilder\"\n\nimport \"./style.scss\"\n\nimport { Actions } from \"../../App\"\n\nconst Builder = React.forwardRef((props, ref) => {\n  const { sourceBitmapData, dispatch } = props\n\n  const guideRight = require(\"../../assets/guides/guide_right_01.jpg\").default\n  const guideLeft01 = require(\"../../assets/guides/guide_left_01.jpg\").default\n  const guideLeft02 = require(\"../../assets/guides/guide_left_02.jpg\").default\n\n  const images = useRef([guideRight, guideLeft01, guideLeft02]).current\n  const bitmapData = useRef(new Array(images.length).fill(null)).current\n\n  const [imageArray, setImageArray] = useState()\n  const [dummyIndex, setDummyIndex] = useState()\n  const [dummy, setDummy] = useState()\n  const [opacity, setOpacity] = useState(1)\n  const [transparency, setTransparency] = useState(1)\n  const [showDots, setShowDots] = useState(true)\n  const [wireframeOpacity, setWireframeOpacity] = useState(1)\n\n  const gridItems = useRef([]).current\n\n  const [forceUpdate, setForceUpdate] = useState()\n\n  const canvasHolder = useRef()\n  const dotsHolder = useRef()\n\n  useEffect(() => {\n    if (!imageArray) {\n      let completed = 0\n      function callback() {\n        if (++completed === images.length) {\n          // if (CanvasDummyBuilder.meshables[0].parent) {\n          // gridItems.current = CanvasDummyBuilder.meshables.map((dummy, i) => {\n          //   const gridManager = new GridManager()\n          //   const { parent } = dummy\n          //   gridManager.init(parent.width, parent.height, 2, 2)\n          //   CanvasDummyBuilder.meshables[i] = dummy.initMesh(gridManager)\n          //   return gridManager\n          // })\n          // }\n\n          setDummyIndex(2)\n        }\n      }\n\n      images.forEach((url, index) => {\n        const img = new Image()\n        img.src = url\n\n        bitmapData[index] = img\n\n        img.onload = callback\n      })\n    }\n  }, [imageArray])\n\n  useEffect(() => {\n    if (dummyIndex >= 0) {\n      setDummy(CanvasDummyBuilder.meshables[dummyIndex])\n    }\n  }, [dummyIndex])\n\n  useEffect(() => {\n    if (dummy) {\n      while (canvasHolder.current.childNodes.length)\n        canvasHolder.current.removeChild(canvasHolder.current.childNodes[0])\n\n      dummy.refresh()\n      canvasHolder.current.appendChild(dummy.meshCanvas.output)\n      canvasHolder.current.appendChild(dummy.meshCanvas.wireframe)\n    }\n  }, [dummy])\n\n  useEffect(() => {\n    if (dummy) {\n      dummy.meshCanvas.wireframe.style.opacity = wireframeOpacity\n    }\n  }, [wireframeOpacity])\n\n  if (!dummy) return null\n\n  // function getControls(type) {\n  //   const number = dummy.meshCanvas.gridManager[type]\n  //   const dummies\n  //   switch (type) {\n  //     case \"columns\":\n  //       return <div className=\"controls-column\"></div>\n  //       break\n  //   }\n  // }\n\n  return (\n    <div className=\"builder\">\n      <div className=\"holder\">\n        <div\n          className=\"guide\"\n          style={{\n            width: dummy.meshCanvas.output.width + 200,\n            height: dummy.meshCanvas.output.height + 200,\n          }}\n        >\n          <img draggable={false} src={bitmapData[dummyIndex].src} alt={`guide`} />\n          <div\n            className=\"canvas-holder\"\n            ref={canvasHolder}\n            style={{\n              opacity,\n            }}\n          ></div>\n\n          <div\n            ref={dotsHolder}\n            id=\"dots-holder\"\n            className=\"dots-holder\"\n            onMouseDown={event => {\n              dispatch(event, Infinity, dummyIndex, dotsHolder.current)\n            }}\n            style={{\n              opacity: +showDots,\n              width: dummy.meshCanvas.output.width,\n              height: dummy.meshCanvas.output.height,\n            }}\n          >\n            {/* <div className=\"controls\">{getControls(\"columns\")}</div> */}\n            {/* <div> */}\n            {dummy.meshCanvas.gridManager.positions.map((coord, index) => {\n              return (\n                <div\n                  onMouseDown={event => {\n                    dispatch(event, index, dummyIndex, dotsHolder.current)\n                  }}\n                  key={`dot_${index}`}\n                  className=\"grid-dot\"\n                  style={{\n                    left: coord.x,\n                    top: coord.y,\n                  }}\n                >\n                  <div className=\"cross-01\" />\n                  <div className=\"cross-02\" />\n                  {/* <p>{index}</p> */}\n                </div>\n              )\n            })}\n            {/* </div> */}\n          </div>\n        </div>\n      </div>\n      <div className=\"controls\">\n        <div className=\"button-holder\">\n          {CanvasDummyBuilder.meshables.map((ignore, index) => {\n            return (\n              <div\n                className=\"button\"\n                key={`button_${index}`}\n                onClick={() => {\n                  setDummyIndex(index)\n                  setDummy(CanvasDummyBuilder.meshables[index])\n                }}\n              >{`Show Canvas ${index}`}</div>\n            )\n          })}\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setOpacity(opacity ? 0 : transparency)\n            }}\n          >\n            <p>{`${!opacity ? \"Show\" : \"Hide\"} Mesh Warp`}</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setWireframeOpacity(+!wireframeOpacity)\n            }}\n          >\n            <p>{`${wireframeOpacity ? \"Show\" : \"Hide\"} Wireframe`}</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              setShowDots(!showDots)\n            }}\n          >\n            <p>{`${!showDots ? \"Show\" : \"Hide\"} Dots`}</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              const next_opacity = opacity === 1 ? 0.55 : 1\n              setTransparency(next_opacity)\n              setOpacity(next_opacity)\n            }}\n          >\n            <p>Toggle Transparency</p>\n          </div>\n        </div>\n        <div className=\"button-holder\">\n          <div\n            className=\"button\"\n            onClick={() => {\n              const gm = dummy.meshCanvas.gridManager\n              const columns = gm.columns + 1\n\n              const old_points = gm.positions\n              const new_points_01_columns = []\n              const new_points_02_rows = []\n              const new_points_03_square = []\n              const new_points = []\n\n              function getAverage(...indexes) {\n                let x = 0\n                let y = 0\n                indexes.forEach(index => {\n                  x += old_points[index].x\n                  y += old_points[index].y\n                })\n                x /= indexes.length\n                y /= indexes.length\n\n                return { x, y }\n              }\n\n              for (let i = 0; i < old_points.length; i++) {\n                if (i + columns < old_points.length) new_points_02_rows.push(getAverage(i, i + columns))\n                if (i % columns !== gm.columns) {\n                  if (i + 1 < old_points.length) new_points_01_columns.push(getAverage(i, i + 1))\n                  if (i + columns < old_points.length)\n                    new_points_03_square.push(getAverage(i, i + 1, i + columns, i + columns + 1))\n                }\n              }\n\n              let direction = \"across\"\n              const col_total = gm.columns + columns\n              function pushNew(array1, array2, nextValue) {\n                for (let i = 0; i < col_total; i++) {\n                  if (i % 2) {\n                    new_points.push(array1.shift())\n                  } else {\n                    new_points.push(array2.shift())\n                  }\n                  if (i === col_total - 1) direction = nextValue\n                }\n              }\n              while (\n                old_points.length +\n                new_points_01_columns.length +\n                new_points_02_rows.length +\n                new_points_03_square.length\n              ) {\n                switch (direction) {\n                  case \"across\":\n                    pushNew(new_points_01_columns, old_points, \"middle\")\n                    break\n                  case \"middle\":\n                    pushNew(new_points_03_square, new_points_02_rows, \"across\")\n\n                    break\n                  default:\n                    break\n                }\n              }\n              dummy.doublePoints(new_points)\n              setForceUpdate(Math.random())\n            }}\n          >\n            <p>Double Points</p>\n          </div>\n          <div\n            className=\"button\"\n            onClick={() => {\n              const attributes = [\"width\", \"height\", \"columns\", \"rows\"]\n              let output = `{ `\n              const gm = dummy.meshCanvas.gridManager\n              attributes.forEach(attribute => {\n                output += `\"${attribute}\": ${gm[attribute]} , `\n              })\n              output += `\"positions\": [ `\n              gm.positions.forEach((coord, index) => {\n                output += `{ \"x\": ${coord.x}, \"y\": ${coord.y} }`\n                if (gm.positions[index + 1]) output += \", \"\n              })\n              output += `], \"rootPositions\": [ `\n\n              gm.rootPositions.forEach((coord, index) => {\n                output += `{ \"x\": ${coord.x}, \"y\": ${coord.y} }`\n                if (gm.positions[index + 1]) output += \", \"\n              })\n              output += \"]}\"\n\n              console.clear()\n              console.log(output)\n\n              // width: ${GridManager.width}, height: ${GridManager.height}, width: ${GridManager.width}, height: ${GridManager.height},  `\n            }}\n          >\n            <p>Output Points</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n})\n\nexport default Builder\n","import React, { useEffect, useRef, useState } from \"react\"\nimport { traverseTwoPhase } from \"react-dom/test-utils\"\nimport GridManager from \"../../lib/GridManager\"\nimport CanvasDummyBuilder from \"../../lib/CanvasDummyBuilder\"\n\nimport { CanvasColoring } from \"@ff0000-ad-tech/ad-canvas\"\n\nimport \"./style.scss\"\n// while (whatever.current.childNodes.length) whatever.current.removeChild(whatever.current.childNodes[0])\n//           CanvasDummyBuilder.meshables.forEach((dummy, i) => {\n//             whatever.current.appendChild(dummy.meshCanvas.output)\n//           })\nimport { Actions } from \"../../App\"\n\nconst Preview = React.forwardRef((props, ref) => {\n  const { thumbs, layers } = props\n  const canvasRef = useRef()\n\n  const [selected, setSelected] = useState(0)\n\n  useEffect(() => {\n    if (selected >= 0) {\n      CanvasDummyBuilder.refresh(thumbs[selected])\n      const canvas = canvasRef.current\n      const ctx = canvas.getContext(\"2d\")\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n      for (let i = layers.length - 1; i > -1; i--) {\n        const img = layers[i]\n        switch (i) {\n          case 0:\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            break\n          case 1:\n            ctx.globalCompositeOperation = \"multiply\"\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            break\n          case 3:\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            ctx.globalCompositeOperation = \"source-atop\"\n\n            // ctx.drawImage(thumbs[selected], 0, 0, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[2].meshCanvas.output, 2, 2, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[2].meshCanvas.output, 0, 0, canvas.width, canvas.height)\n            break\n          case 4:\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            ctx.globalCompositeOperation = \"source-atop\"\n            //   // ctx.drawImage(thumbs[selected], 0, 0, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[0].meshCanvas.output, 2, 2, canvas.width, canvas.height)\n            ctx.drawImage(CanvasDummyBuilder.meshables[0].meshCanvas.output, 0, 0, canvas.width, canvas.height)\n            break\n          default:\n            break\n        }\n        ctx.globalCompositeOperation = \"source-over\"\n        CanvasColoring.contrast({\n          target: canvasRef.current,\n          amount: 1.02,\n        })\n        // CanvasColoring.tint({\n        //   target: canvasRef.current,\n        //   color: \"rgb(255, 255, 255)\",\n        //   amount: 0.1,\n        // })\n      }\n    }\n  }, [selected])\n\n  return (\n    <div className=\"container\">\n      <div className=\"preview\">\n        <div className=\"samples\">\n          {thumbs.map((img, i) => {\n            return (\n              <img\n                className={i === selected ? \"selected\" : \"\"}\n                src={img.src}\n                key={`${img.src}_${i}`}\n                alt={`thumbnail${i}`}\n                onClick={() => {\n                  setSelected(i)\n                }}\n              />\n            )\n          })}\n        </div>\n        <canvas ref={canvasRef} width={1000} height={1000} />\n      </div>\n    </div>\n  )\n})\n\nexport default Preview\n","import React, { useEffect, useRef, useState, useReducer } from \"react\"\nimport { Router, Route, Switch, withRouter } from \"react-router-dom\"\nimport history from \"./history.js\"\n\nimport Builder from \"./components/Builder\"\nimport Preview from \"./components/Preview\"\n// import CanvasDrawer from \"./components/CanvasDrawer\"\n// import MeshDrawer from \"./components/MeshDrawer\"\n// import Grid from \"./components/Grid\"\nimport CanvasDummyBuilder from \"./lib/CanvasDummyBuilder\"\n\nimport \"./App.scss\"\n// import GridManager from \"./lib/GridManager\"\n\nexport const Actions = {\n  MOUSE_DOWN: \"mousedown\",\n  MOUSE_UP: \"mouseup\",\n  MOUSE_MOVE: \"mousemove\",\n}\n\n/*\n\nMAIN COMP:\n  Comp: 1000x1000\n  Guide: 1200x1200\n\n\nRIGHT SOCK:\n  Canvas 1 (lives on main comp):\n    294x971\n      Bitmap Data Drawn into Canvas:\n        x: -4, y: -2\n        590x975\n\n\n\n\n\n\nLEFT SOCK:\n  Canvas 1 (initial warping used in Canvas 2):\n    297x974\n      Bitmap Data Drawn into Canvas:\n        x: -293 (Align.RIGHT), y: -1\n        590x975\n      Guide:\n        487x1140\n  Canvas 2 (lives on main comp, warps Canvas 1):\n    287x940\n\n\n\n\n\n\n*/\n\nexport default function App() {\n  const [bodyRef, setBody] = useState()\n\n  const dotIndexRef = useRef()\n  const boundingRect = useRef()\n  const mouseDownPos = useRef()\n  const [forceUpdate, setForceUpdate] = useState()\n\n  const assets = [\n    // require(\"./assets/textures/asset_01a.jpg\").default,\n    require(\"./assets/textures/asset_01.jpg\").default,\n    require(\"./assets/textures/asset_02.jpg\").default,\n    require(\"./assets/textures/asset_03.jpg\").default,\n    require(\"./assets/textures/asset_04.jpg\").default,\n    require(\"./assets/textures/asset_looney2.jpg\").default,\n    require(\"./assets/textures/asset_bp2.jpg\").default,\n    require(\"./assets/textures/asset_tmnt2.jpg\").default,\n  ]\n  const assetData = useRef([])\n\n  const layers = [\n    require(\"./assets/layers/layer_01.png\").default,\n    require(\"./assets/layers/layer_02_multiply.png\").default,\n    require(\"./assets/layers/layer_03_base.png\").default,\n    require(\"./assets/layers/sock_mask_left.png\").default,\n    require(\"./assets/layers/sock_mask_right.png\").default,\n  ]\n  const layerData = useRef([])\n\n  // const whatever = useRef()\n\n  const [sourceBitmapData, setSourceBitmapData] = useState()\n\n  const canvasHolder = useRef()\n\n  const gridTarget = useRef()\n\n  ////////////////////////////////////////////////////////////\n\n  function handleMouseEvent(event, index, dummyIndex, parent) {\n    event.preventDefault()\n    event.stopPropagation()\n    switch (event.type) {\n      case Actions.MOUSE_DOWN:\n        bodyRef.addEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n        bodyRef.addEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n        gridTarget.current = dummyIndex\n        dotIndexRef.current = index\n        boundingRect.current = parent.getBoundingClientRect()\n\n        mouseDownPos.current = {\n          x: event.pageX,\n          y: event.pageY,\n        }\n\n        break\n      case Actions.MOUSE_UP:\n        bodyRef.removeEventListener(Actions.MOUSE_MOVE, handleMouseEvent, false)\n        bodyRef.removeEventListener(Actions.MOUSE_UP, handleMouseEvent, false)\n        gridTarget.current = null\n        dotIndexRef.current = null\n        boundingRect.current = null\n        mouseDownPos.current = null\n        break\n      case Actions.MOUSE_MOVE:\n        const targetMeshable = CanvasDummyBuilder.meshables[gridTarget.current]\n        if (dotIndexRef.current === Infinity) {\n          targetMeshable.meshCanvas.gridManager.positions.forEach((position, i) => {\n            // console.log(i, targetMeshable.updateDot)\n            targetMeshable.updateDot(\n              i,\n              position.x - (mouseDownPos.current.x - event.pageX),\n              position.y - (mouseDownPos.current.y - event.pageY)\n            )\n          })\n          mouseDownPos.current = {\n            x: event.pageX,\n            y: event.pageY,\n          }\n        } else {\n          targetMeshable.updateDot(\n            dotIndexRef.current,\n            event.pageX - boundingRect.current.x,\n            event.pageY - boundingRect.current.y - document.documentElement.scrollTop\n          )\n        }\n        // GridManager.updateDot(dotIndexRef.current, event.pageX, event.pageY)\n        setForceUpdate(Math.random())\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (!bodyRef) {\n      setBody(document.getElementsByTagName(\"body\")[0])\n    }\n  }, [bodyRef])\n\n  ////////////////////////////////////////////////////////////\n  useEffect(() => {\n    if (!sourceBitmapData) {\n      let completed = 0\n      function callback() {\n        if (++completed === assets.length + layers.length) {\n          const img = assetData.current[0]\n\n          // setTimeout(() => {\n          setSourceBitmapData(img)\n          // }, 1000)\n          CanvasDummyBuilder.init(img)\n        }\n      }\n\n      assets.forEach((url, i) => {\n        const img = new Image()\n        img.src = url\n\n        img.onload = () => {\n          assetData.current[i] = img\n          callback()\n        }\n      })\n      layers.forEach((url, i) => {\n        const img = new Image()\n        img.src = url\n\n        img.onload = () => {\n          layerData.current[i] = img\n          callback()\n        }\n      })\n    }\n  }, [sourceBitmapData])\n\n  // return (\n  //   <div>\n  //     <div ref={canvasHolder} />\n  //   </div>\n  // )\n\n  if (!sourceBitmapData) return <div className=\"loading\">LOADING!</div>\n\n  // return <div ref={whatever} />\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route\n          path=\"/admin\"\n          // path=\"/\"\n          render={props => {\n            return <Builder sourceBitmapData={sourceBitmapData} dispatch={handleMouseEvent} />\n          }}\n        />\n        <Route path=\"\" render={props => <Preview thumbs={assetData.current} layers={layerData.current} />} />\n      </Switch>\n    </Router>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\n// ReactDOM.render(\n// \t<React.StrictMode>\n// \t\t<App />\n// \t</React.StrictMode>,\n// \tdocument.getElementById('root')\n// )\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}